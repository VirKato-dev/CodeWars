package nolimit.task3;

import java.util.Scanner;

/**
 * У Кати насыщенный день на работе. Ей надо передать n разных договоров коллегам.
 * Все встречи происходят на разных этажах, а между этажами можно перемещаться только по лестничным пролетам
 * — считается, что это улучшает физическую форму сотрудников.
 * Прохождение каждого пролета занимает ровно 1 минуту.
 * <p>
 * Сейчас Катя на парковочном этаже, планирует свой маршрут.
 * Коллег можно посетить в любом порядке, но один из них покинет офис через t минут.
 * С парковочного этажа лестницы нет — только лифт, на котором можно подняться на любой этаж.
 * <ul>В итоге план Кати следующий:
 * <li>Подняться на лифте на произвольный этаж. Считается, что лифт поднимается на любой этаж за 0 минут.</li>
 * <li>Передать всем коллегам договоры, перемещаясь между этажами по лестнице.</li>
 * <li>Считается, что договоры на этаже передаются мгновенно.</li>
 * <li>В первые t минут передать договор тому коллеге, который планирует уйти.</li>
 * <li>Пройти минимальное количество лестничных пролетов.</li>
 * </ul>
 * Помогите Кате выполнить все пункты ее плана.
 * <p>
 * В первом примере времени достаточно, чтобы Катя поднялась по этажам по порядку.
 * <p>
 * Во втором примере Кате понадобится подняться к уходящему сотруднику,
 * а потом пройти всех остальных — например, в порядке {1,2,3,4,6}
 */
public class Solution {
    public static void main(String[] args) {
//        Scanner in = new Scanner(System.in);
//        Scanner in = new Scanner("5  5\n1  4  9  16  25\n2"); // 24
//        Scanner in = new Scanner("6  4\n1  2  3  6  8  25\n5"); // 31
        Scanner in = new Scanner("6  1\n1  2  3  6  8  10\n5"); // 9

        byte n = in.nextByte(); // количество сотрудников
        byte t = in.nextByte(); // время, через которое уйдёт сотрудник
        byte[] e = new byte[n]; // номер этажа для каждого сотрудника
        for (int j = 0; j < n; j++) {
            e[j] = in.nextByte();
        }
        byte s = in.nextByte(); // уходящий сотрудник

        int left = e[s - 1] - 1; // время до этажа уходящего сотрудника (начиная с первого этажа)
        int rite = e[n - 1] - e[s - 1]; // время до этажа уходящего сотрудника (начиная с последнего этажа)

        int result = e[n - 1] - 1; // время для посещения всех этажей по-порядку

        if (left > t && rite > t) {
            // если не удастся дойти до уходящего сотрудника посещая все этажи по-очереди
            result += Math.min(left, rite);
        }

        System.out.println(result);
    }
}
